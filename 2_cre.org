#+TITLE: Salas 2020 CRE recombinase expression
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
#+PROPERTY: header-args :exports both :eval never-export
#+OPTIONS: H:4 num:nil toc:5
#+EXCLUDE_TAGS: noexport
#+AUTHOR: Mehmet Tekman

The aim here is to measure CRE recombinase expression by mapping the FASTQ batch data to the transcriptome of the CRE recombinase.

* Testing the Quantification
** Mapping

   This was performed on Galaxy. Initially =RNA STAR= was attempted but failed due to errors (it's more suitable for mapping to the Genome) and any and all attempts to force it work (including creating dummy GTF files) did not yield any results. BWA also failed to map this way, and Salmon (which has CELseq2 mapping capabilities) failed also.

   Bowtie and HISAT2 were the only aligners that produced results (only a few, as expected) and their results were identical for that matter. (See Galaxy Histories /Other test/ and /More HISAT tests/).

   A few random datasets were picked from the previous /Adrian Salas Datasets/ histories and quantities were tests (9, 5, 43, 31, 9 reads respectively).

*** Check the 43 reads

    Here we try to find the 43 reads in the HISAT2 BAM file

    #+begin_src bash
      samtools view \
          ~/Downloads/Galaxy11-\[HISAT2_on_data_3_and_data_6__aligned_reads_\(BAM\)\].bam \
          | cut -f 12- \
          | sort | uniq -c
    #+end_src

    #+RESULTS:
    |       18 | AS:i:0   | XN:i:0   | XM:i:0 | XO:i:0 | XG:i:0 | NM:i:0 | MD:Z:75     | YT:Z:UU   | NH:i:1  |        |
    |        1 | AS:i:-12 | XN:i:0   | XM:i:0 | XO:i:0 | XG:i:0 | NM:i:0 | MD:Z:75     | YT:Z:UU   | NH:i:1  |        |
    |        9 | AS:i:-1  | XN:i:0   | XM:i:0 | XO:i:0 | XG:i:0 | NM:i:0 | MD:Z:74     | YT:Z:UU   | NH:i:1  |        |
    |        1 | AS:i:-2  | XN:i:0   | XM:i:0 | XO:i:0 | XG:i:0 | NM:i:0 | MD:Z:74     | YT:Z:UU   | NH:i:1  |        |
    |        1 | AS:i:-2  | ZS:i:-8  | XN:i:0 | XM:i:0 | XO:i:0 | XG:i:0 | NM:i:0      | MD:Z:73   | YT:Z:UU | NH:i:1 |
    |        2 | AS:i:-3  | XN:i:0   | XM:i:0 | XO:i:0 | XG:i:0 | NM:i:0 | MD:Z:72     | YT:Z:UU   | NH:i:1  |        |
    |        1 | AS:i:-3  | XN:i:0   | XM:i:1 | XO:i:0 | XG:i:0 | NM:i:1 | MD:Z:49A25  | YT:Z:UU   | NH:i:1  |        |
    |        1 | AS:i:-3  | XN:i:0   | XM:i:1 | XO:i:0 | XG:i:0 | NM:i:1 | MD:Z:68A6   | YT:Z:UU   | NH:i:1  |        |
    |        1 | AS:i:-3  | ZS:i:-3  | XN:i:0 | XM:i:1 | XO:i:0 | XG:i:0 | NM:i:1      | MD:Z:2A72 | YT:Z:UU | NH:i:1 |
    |        2 | AS:i:-3  | ZS:i:-8  | XN:i:0 | XM:i:0 | XO:i:0 | XG:i:0 | NM:i:0      | MD:Z:72   | YT:Z:UU | NH:i:1 |
    |        1 | AS:i:-4  | XN:i:0   | XM:i:0 | XO:i:0 | XG:i:0 | NM:i:0 | MD:Z:71     | YT:Z:UU   | NH:i:1  |        |
    |        1 | AS:i:-4  | ZS:i:-10 | XN:i:0 | XM:i:0 | XO:i:0 | XG:i:0 | NM:i:0      | MD:Z:71   | YT:Z:UU | NH:i:1 |
    |        1 | AS:i:-4  | ZS:i:-8  | XN:i:0 | XM:i:1 | XO:i:0 | XG:i:0 | NM:i:1      | MD:Z:5T68 | YT:Z:UU | NH:i:1 |
    |        1 | AS:i:-5  | ZS:i:-11 | XN:i:0 | XM:i:0 | XO:i:0 | XG:i:0 | NM:i:0      | MD:Z:70   | YT:Z:UU | NH:i:1 |
    |        2 | AS:i:-8  | XN:i:0   | XM:i:0 | XO:i:1 | XG:i:1 | NM:i:1 | MD:Z:49^T26 | YT:Z:UU   | NH:i:1  |        |
    | 20001975 | YT:Z:UU  |          |        |        |        |        |             |           |         |        |
    |      501 | YT:Z:UU  | YF:Z:NS  |        |        |        |        |             |           |         |        |


    If we count all reads with =NH:i:>0= then we recuperate 43 reads. We can definitely demultiplex this, but not using FeatureCounts (which requires a GTF file).

    First let's deduplicate our reads using =umi-tools deduplicate=.

    #+begin_src bash
      samtools view \
          ~/Downloads/Galaxy20-[UMI-tools_deduplicate_on_data_11].bam \
          | cut -f 12- \
          | sort | uniq -c
    #+end_src

    #+RESULTS:
    | 14 | AS:i:0   | XN:i:0   | XM:i:0 | XO:i:0 | XG:i:0 | NM:i:0 | MD:Z:75     | YT:Z:UU   | NH:i:1  |        |
    |  1 | AS:i:-12 | XN:i:0   | XM:i:0 | XO:i:0 | XG:i:0 | NM:i:0 | MD:Z:75     | YT:Z:UU   | NH:i:1  |        |
    |  6 | AS:i:-1  | XN:i:0   | XM:i:0 | XO:i:0 | XG:i:0 | NM:i:0 | MD:Z:74     | YT:Z:UU   | NH:i:1  |        |
    |  1 | AS:i:-2  | XN:i:0   | XM:i:0 | XO:i:0 | XG:i:0 | NM:i:0 | MD:Z:74     | YT:Z:UU   | NH:i:1  |        |
    |  2 | AS:i:-3  | XN:i:0   | XM:i:0 | XO:i:0 | XG:i:0 | NM:i:0 | MD:Z:72     | YT:Z:UU   | NH:i:1  |        |
    |  1 | AS:i:-3  | XN:i:0   | XM:i:1 | XO:i:0 | XG:i:0 | NM:i:1 | MD:Z:49A25  | YT:Z:UU   | NH:i:1  |        |
    |  1 | AS:i:-3  | ZS:i:-8  | XN:i:0 | XM:i:0 | XO:i:0 | XG:i:0 | NM:i:0      | MD:Z:72   | YT:Z:UU | NH:i:1 |
    |  1 | AS:i:-4  | XN:i:0   | XM:i:0 | XO:i:0 | XG:i:0 | NM:i:0 | MD:Z:71     | YT:Z:UU   | NH:i:1  |        |
    |  1 | AS:i:-4  | ZS:i:-8  | XN:i:0 | XM:i:1 | XO:i:0 | XG:i:0 | NM:i:1      | MD:Z:5T68 | YT:Z:UU | NH:i:1 |
    |  1 | AS:i:-5  | ZS:i:-11 | XN:i:0 | XM:i:0 | XO:i:0 | XG:i:0 | NM:i:0      | MD:Z:70   | YT:Z:UU | NH:i:1 |
    |  1 | AS:i:-8  | XN:i:0   | XM:i:0 | XO:i:1 | XG:i:1 | NM:i:1 | MD:Z:49^T26 | YT:Z:UU   | NH:i:1  |        |

    We get 30 reads now, okay that's still good.

    Let's do a quick demultiplex. (It looks like =umi-tools demultiplex= will not work here, so we will just do this ourselves).

    #+begin_src bash :session ya :
      samtools view \
               ~/Downloads/Galaxy20-[UMI-tools_deduplicate_on_data_11].bam \
               | cut -f 1 > reads.txt

    #+end_src

    #+RESULTS:
    | J00182:130:H37JKBBXY:7:2123:29011:40543_CATGCA_GTTCTT |
    | J00182:130:H37JKBBXY:7:2222:3518:11741_CATGCA_GTTCTT  |
    | J00182:130:H37JKBBXY:7:1113:15422:35004_AGTGTC_AAAACA |
    | J00182:130:H37JKBBXY:7:2213:27671:6783_AGTGTC_AAAACA  |
    | J00182:130:H37JKBBXY:7:1212:18720:21905_AGTGTC_AAAACA |
    | J00182:130:H37JKBBXY:7:1112:16630:15012_AGTGTC_AAAACA |
    | J00182:130:H37JKBBXY:7:2121:27346:35761_GACAGA_TAAGGT |
    | J00182:130:H37JKBBXY:7:1204:27194:6660_TCTTGC_CTTCGG  |
    | J00182:130:H37JKBBXY:7:1123:29741:8435_CATGCA_AACGTG  |
    | J00182:130:H37JKBBXY:7:1206:7679:14097_CATGCA_AACGTG  |
    | J00182:130:H37JKBBXY:7:1223:19370:36323_TCTTGC_CTTCGG |
    | J00182:130:H37JKBBXY:7:2217:11109:11636_TCTTGC_CTTCGG |
    | J00182:130:H37JKBBXY:7:1223:6776:35426_CATGCA_AACGTG  |
    | J00182:130:H37JKBBXY:7:2219:23551:39453_CATGCA_AACGTG |
    | J00182:130:H37JKBBXY:7:1110:12611:10827_TCTTGC_CTTCGG |
    | J00182:130:H37JKBBXY:7:2215:25621:40156_TCTTGC_CTTCGG |
    | J00182:130:H37JKBBXY:7:2205:25763:20076_CATGCA_AACGTG |
    | J00182:130:H37JKBBXY:7:2112:32116:19056_CATGCA_AACGTG |
    | J00182:130:H37JKBBXY:7:2224:7009:20146_TCTTGC_CTTCGG  |
    | J00182:130:H37JKBBXY:7:2222:14113:35163_TGTCGA_GGGCCG |
    | J00182:130:H37JKBBXY:7:1127:9019:10475_TGTCGA_GGGCCG  |
    | J00182:130:H37JKBBXY:7:2123:4056:3881_TGTCGA_GGGCCG   |
    | J00182:130:H37JKBBXY:7:2104:29609:18265_TGTCGA_GGGCCG |
    | J00182:130:H37JKBBXY:7:2128:23196:21395_TGTCGA_GGGCCG |
    | J00182:130:H37JKBBXY:7:1103:19898:29712_TGTCGA_GGGCCG |
    | J00182:130:H37JKBBXY:7:2211:16457:25439_TGTCGA_GGGCCG |
    | J00182:130:H37JKBBXY:7:1224:30563:30784_TGTCGA_GGGCCG |
    | J00182:130:H37JKBBXY:7:1126:15848:36130_GTGATC_TCAGAC |
    | J00182:130:H37JKBBXY:7:2225:25631:39084_GTGATC_TCAGAC |
    | J00182:130:H37JKBBXY:7:1210:2514:12708_ATCACG_CGCTCG  |

    (and now to summarise the above)

    #+begin_src sh  :results output
      cat reads.txt\
          | awk -F_  '\
      { \
          cb=$3; \
          umi=$2; \
          cell[cb]+=1; \
      } \
      END { \
          for (cb in cell){ \
              print cb"\t"cell[cb]; \
          } \
      }'
    #+end_src

    #+RESULTS:
    : AACGTG	6
    : CTTCGG	6
    : TAAGGT	1
    : AAAACA	4
    : GTTCTT	2
    : CGCTCG	1
    : TCAGAC	2
    : GGGCCG	8

    30 reads, good.



* Picking a Transcript

  Two options were given, one I discovered online (AddGene), and the other from Adrian (NCBI). There is virtually no overlap between these two sequences, leading me to wonder which of these are actually the correct sequence to use.

** AddGene

  The CRE recombinase sequence I found was at [[https://www.addgene.org/62730/sequences/][AddGene]] and 6.7 kbp long:

   #+begin_src conf
    > CRE recombinase sequence 6786 bps
    TTCTTGAAGACGAAAGGGCCTCGTGATACGCCTATTTTTATAGGTTAATGTCATGATAATAATGGTTTCT
    TAGACGTCAGGTGGCACTTTTCGGGGAAATGTGCGCGGAACCCCTATTTGTTTATTTTTCTAAATACATT
    CAAATATGTATCCGCTCATGAGACAATAACCCTGATAAATGCTTCAATAATATTGAAAAAGGAAGAGTAT
    GAGTATTCAACATTTCCGTGTCGCCCTTATTCCCTTTTTTGCGGCATTTTGCCTTCCTGTTTTTGCTCAC
    CCAGAAACGCTGGTGAAAGTAAAAGATGCTGAAGATCAGTTGGGTGCACGAGTGGGTTACATCGAACTGG
    ATCTCAACAGCGGTAAGATCCTTGAGAGTTTTCGCCCCGAAGAACGTTTTCCAATGATGAGCACTTTTAA
    AGTTCTGCTATGTGGCGCGGTATTATCCCGTGTTGACGCCGGGCAAGAGCAACTCGGTCGCCGCATACAC
    TATTCTCAGAATGACTTGGTTGAGTACTCACCAGTCACAGAAAAGCATCTTACGGATGGCATGACAGTAA
    GAGAATTATGCAGTGCTGCCATAACCATGAGTGATAACACTGCGGCCAACTTACTTCTGACAACGATCGG
    AGGACCGAAGGAGCTAACCGCTTTTTTGCACAACATGGGGGATCATGTAACTCGCCTTGATCGTTGGGAA
    CCGGAGCTGAATGAAGCCATACCAAACGACGAGCGTGACACCACGATGCCTGCAGCAATGGCAACAACGT
    TGCGCAAACTATTAACTGGCGAACTACTTACTCTAGCTTCCCGGCAACAATTAATAGACTGGATGGAGGC
    GGATAAAGTTGCAGGACCACTTCTGCGCTCGGCCCTTCCGGCTGGCTGGTTTATTGCTGATAAATCTGGA
    GCCGGTGAGCGTGGGTCTCGCGGTATCATTGCAGCACTGGGGCCAGATGGTAAGCCCTCCCGTATCGTAG
    TTATCTACACGACGGGGAGTCAGGCAACTATGGATGAACGAAATAGACAGATCGCTGAGATAGGTGCCTC
    ACTGATTAAGCATTGGTAACTGTCAGACCAAGTTTACTCATATATACTTTAGATTGATTTAAAACTTCAT
    TTTTAATTTAAAAGGATCTAGGTGAAGATCCTTTTTGATAATCTCATGACCAAAATCCCTTAACGTGAGT
    TTTCGTTCCACTGAGCGTCAGACCCCGTAGAAAAGATCAAAGGATCTTCTTGAGATCCTTTTTTTCTGCG
    CGTAATCTGCTGCTTGCAAACAAAAAAACCACCGCTACCAGCGGTGGTTTGTTTGCCGGATCAAGAGCTA
    CCAACTCTTTTTCCGAAGGTAACTGGCTTCAGCAGAGCGCAGATACCAAATACTGTCCTTCTAGTGTAGC
    CGTAGTTAGGCCACCACTTCAAGAACTCTGTAGCACCGCCTACATACCTCGCTCTGCTAATCCTGTTACC
    AGTGGCTGCTGCCAGTGGCGATAAGTCGTGTCTTACCGGGTTGGACTCAAGACGATAGTTACCGGATAAG
    GCGCAGCGGTCGGGCTGAACGGGGGGTTCGTGCACACAGCCCAGCTTGGAGCGAACGACCTACACCGAAC
    TGAGATACCTACAGCGTGAGCTATGAGAAAGCGCCACGCTTCCCGAAGGGAGAAAGGCGGACAGGTATCC
    GGTAAGCGGCAGGGTCGGAACAGGAGAGCGCACGAGGGAGCTTCCAGGGGGAAACGCCTGGTATCTTTAT
    AGTCCTGTCGGGTTTCGCCACCTCTGACTTGAGCGTCGATTTTTGTGATGCTCGTCAGGGGGGCGGAGCC
    TATGGAAAAACGCCAGCAACGCGGCCTTTTTACGGTTCCTGGCCTTTTGCTGGCCTTTTGCTCACATGTT
    CTTTCCTGCGTTATCCCCTGATTCTGTGGATAACCGTATTACCGCCTTTGAGTGAGCTGATACCGCTCGC
    CGCAGCCGAACGACCGAGCGCAGCGAGTCAGTGAGCGAGGAAGCGGAAGAGCGCCTGATGCGGTATTTTC
    TCCTTACGCATCTGTGCGGTATTTCACACCGCATATATGGTGCACTCTCAGTACAATCTGCTCTGATGCC
    GCATAGTTAAGCCAGTATACACTCCGCTATCGCTACGTGACTGGGTCATGGCTGCGCCCCGACACCCGCC
    AACACCCGCTGACGCGCCCTGACGGGCTTGTCTGCTCCCGGCATCCGCTTACAGACAAGCTGTGACCGTC
    TCCGGGAGCTGCATGTGTCAGAGGTTTTCACCGTCATCACCGAAACGCGCGAGGCAGCTGCGGTAAAGCT
    CATCAGCGTGGTCGTGAAGCGATTCACAGATGTCTGCCTGTTCATCCGCGTCCAGCTCGTTGAGTTTCTC
    CAGAAGCGTTAATGTCTGGCTTCTGATAAAGCGGGCCATGTTAAGGGCGGTTTTTTCCTGTTTGGTCACT
    GATGCCTCCGTGTAAGGGGGATTTCTGTTCATGGGGGTAATGATACCGATGAAACGAGAGAGGATGCTCA
    CGATACGGGTTACTGATGATGAACATGCCCGGTTACTGGAACGTTGTGAGGGTAAACAACTGGCGGTATG
    GATGCGGCGGGACCAGAGAAAAATCACTCAGGGTCAATGCCAGCGCTTCGTTAATACAGATGTAGGTGTT
    CCACAGGGTAGCCAGCAGCATCCTGCGATGCAGATCCGGAACATAATGGTGCAGGGCGCTGACTTCCGCG
    TTTCCAGACTTTACGAAACACGGAAACCGAAGACCATTCATGTTGTTGCTCAGGTCGCAGACGTTTTGCA
    GCAGCAGTCGCTTCACGTTCGCTCGCGTATCGGTGATTCATTCTGCTAACCAGTAAGGCAACCCCGCCAG
    CCTAGCCGGGTCCTCAACGACAGGAGCACGATCATGCGCACCCGTGGCCAGGACCCAACGCTGCCCGAGA
    TGCGCCGCGTGCGGCTGCTGGAGATGGCGGACGCGATGGATATGTTCTGCCAAGGGTTGGTTTGCGCATT
    CACAGTTCTCCGCAAGAATTGATTGGCTCCAATTCTTGGAGTGGTGAATCCGTTAGCGAGGTGCCGCCGG
    CTTCCATTCAGGTCGAGGTGGCCCGGCTCCATGCACCGCGACGCAACGCGGGGAGGCAGACAAGGTATAG
    GGCGGCGCCTACAATCCATGCCAACCCGTTCCATGTGCTCGCCGAGGCGGCATAAATCGCCGTGACGATC
    AGCGGTCCAGTGATCGAAGTTAGGCTGGTAAGAGCCGCGAGCGATCCTTGAAGCTGTCCCTGATGGTCGT
    CATCTACCTGCCTGGACAGCATGGCCTGCAACGCGGGCATCCCGATGCCGCCGGAAGCGAGAAGAATCAT
    AATGGGGAAGGCCATCCAGCCTCGCGTCGCGAACGCCAGCAAGACGTAGCCCAGCGCGTCGGCCGCCATG
    CCGGCGATAATGGCCTGCTTCTCGCCGAAACGTTTGGTGGCGGGACCAGTGACGAAGGCTTGAGCGAGGG
    CGTGCAAGATTCCGAATACCGCAAGCGACAGGCCGATCATCGTCGCGCTCCAGCGAAAGCGGTCCTCGCC
    GAAAATGACCCAGAGCGCTGCCGGCACCTGTCCTACGAGTTGCATGATAAAGAAGACAGTCATAAGTGCG
    GCGACGATAGTCATGCCCCGCGCCCACCGGAAGGAGCTGACTGGGTTGAAGGCTCTCAAGGGCATCGGTC
    GAGATCCCGGTGCCTAATGAGTGAGCTAACTTACATTAATTGCGTTGCGCTCACTGCCCGCTTTCCAGTC
    GGGAAACCTGTCGTGCCAGCTGCATTAATGAATCGGCCAACGCGCGGGGAGAGGCGGTTTGCGTATTGGG
    CGCCAGGGTGGTTTTTCTTTTCACCAGTGAGACGGGCAACAGCTGATTGCCCTTCACCGCCTGGCCCTGA
    GAGAGTTGCAGCAAGCGGTCCACGCTGGTTTGCCCCAGCAGGCGAAAATCCTGTTTGATGGTGGTTAACG
    GCGGGATATAACATGAGCTGTCTTCGGTATCGTCGTATCCCACTACCGAGATATCCGCACCAACGCGCAG
    CCCGGACTCGGTAATGGCGCGCATTGCGCCCAGCGCCATCTGATCGTTGGCAACCAGCATCGCAGTGGGA
    ACGATGCCCTCATTCAGCATTTGCATGGTTTGTTGAAAACCGGACATGGCACTCCAGTCGCCTTCCCGTT
    CCGCTATCGGCTGAATTTGATTGCGAGTGAGATATTTATGCCAGCCAGCCAGACGCAGACGCGCCGAGAC
    AGAACTTAATGGGCCCGCTAACAGCGCGATTTGCTGGTGACCCAATGCGACCAGATGCTCCACGCCCAGT
    CGCGTACCGTCTTCATGGGAGAAAATAATACTGTTGATGGGTGTCTGGTCAGAGACATCAAGAAATAACG
    CCGGAACATTAGTGCAGGCAGCTTCCACAGCAATGGCATCCTGGTCATCCAGCGGATAGTTAATGATCAG
    CCCACTGACGCGTTGCGCGAGAAGATTGTGCACCGCCGCTTTACAGGCTTCGACGCCGCTTCGTTCTACC
    ATCGACACCACCACGCTGGCACCCAGTTGATCGGCGCGAGATTTAATCGCCGCGACAATTTGCGACGGCG
    CGTGCAGGGCCAGACTGGAGGTGGCAACGCCAATCAGCAACGACTGTTTGCCCGCCAGTTGTTGTGCCAC
    GCGGTTGGGAATGTAATTCAGCTCCGCCATCGCCGCTTCCACTTTTTCCCGCGTTTTCGCAGAAACGTGG
    CTGGCCTGGTTCACCACGCGGGAAACGGTCTGATAAGAGACACCGGCATACTCTGCGACATCGTATAACG
    TTACTGGTTTCACATTCACCACCCTGAATTGACTCTCTTCCGGGCGCTATCATGCCATACCGCGAAAGGT
    TTTGCGCCATTCGATGGTGTCCGGGATCTCGACGCTCTCCCTTATGCGACTCCTGCATTAGGAAGCAGCC
    CAGTAGTAGGTTGAGGCCGTTGAGCACCGCCGCCGCAAGGAATGGTGCATGCAAGGAGATGGCGCCCAAC
    AGTCCCCCGGCCACGGGGCCTGCCACCATACCCACGCCGAAACAAGCGCTCATGAGCCCGAAGTGGCGAG
    CCCGATCTTCCCCATCGGTGATGTCGGCGATATAGGCGCCAGCAACCGCACCTGTGGCGCCGGTGATGCC
    GGCCACGATGCGTCCGGCGTAGAGGATCGAGATCTCGATCCCGCGAAATTAATACGACTCACTATAGGGG
    AATTGTGAGCGGATAACAATTCCCCTCTAGAAATAATTTTGTTTAACTTTAAGAAGGAGATATACCATGG
    GCTCATCGCATCATCATCATCATCATTCATCGGGTCTGGTTCCGCGCGGTTCACACGGTGGTGGTTCGGC
    GGCCGCTATGGGCACCCGCCTGCCGAAAAAAAAACGCAAAGTGTCCAACCTGCTGACGGTGCACCAGAAT
    CTGCCGGCACTGCCGGTCGATGCAACCAGTGACGAAGTGCGCAAAAATCTGATGGATATGTTTCGTGACC
    GCCAAGCCTTCAGCGAACATACGTGGAAAATGCTGCTGTCGGTTTGCCGTAGCTGGGCGGCCTGGTGTAA
    ACTGAACAATCGCAAATGGTTTCCGGCAGAACCGGAAGATGTGCGTGACTATCTGCTGTACCTGCAGGCA
    CGTGGTCTGGCAGTTAAAACCATCCAGCAACATCTGGGCCAACTGAACATGCTGCACCGTCGCTCTGGTC
    TGCCGCGTCCGAGTGATTCCAATGCCGTCAGTCTGGTGATGCGTCGCATTCGTAAAGAAAACGTGGATGC
    AGGCGAACGCGCTAAACAGGCACTGGCTTTTGAACGTACCGATTTCGACCAAGTTCGCTCTCTGATGGAA
    AACAGTGATCGTTGCCAGGACATCCGCAATCTGGCATTCCTGGGTATTGCTTATAACACCCTGCTGCGCA
    TTGCAGAAATCGCTCGTATTCGCGTGAAAGATATCAGCCGTACGGACGGCGGTCGCATGCTGATTCACAT
    CGGCCGTACCAAAACGCTGGTTTCCACCGCGGGCGTCGAAAAAGCCCTGTCACTGGGTGTCACGAAACTG
    GTGGAACGCTGGATTTCAGTTTCGGGCGTCGCAGATGACCCGAACAATTACCTGTTTTGTCGTGTGCGCA
    AAAATGGTGTTGCAGCTCCGAGCGCTACCTCTCAGCTGAGTACGCGTGCGCTGGAAGGCATCTTCGAAGC
    CACCCATCGCCTGATTTATGGCGCGAAAGATGACAGCGGTCAGCGTTACCTGGCATGGTCCGGTCACTCA
    GCTCGTGTTGGTGCAGCACGTGATATGGCACGTGCAGGTGTCTCTATCCCGGAAATTATGCAGGCCGGCG
    GTTGGACGAACGTGAATATTGTTATGAACTATATTCGTAACCTGGACTCTGAAACGGGTGCGATGGTGCG
    TCTGCTGGAAGATGGCGACTGAGGATCCGGCTGCTAACAAAGCCCGAAAGGAAGCTGAGTTGGCTGCTGC
    CACCGCTGAGCAATAACTAGCATAACCCCTTGGGGCCTCTAAACGGGTCTTGAGGGGTTTTTTGCTGAAA
    GGAGGAACTATATCCGGATATCCCGCAAGAGGCCCGGCAGTACCGGCATAACCAAGCCTATGCCTACAGC
    ATCCAGGGTGACGGTGCCGAGGATGACGATGAGCGCATTGTTAGATTTCATACACGGTGCCTGACTGCGT
    TAGCAATTTAACTGTGATAAACTACCGCATTAAAGCTTATCGATGATAAGCTGTCAAACATGAGAA

  #+end_src


** Enterobacteria Phage P1

   This is the one that Adrian sent in an email from [[https://www.ncbi.nlm.nih.gov/nuccore/NC_005856.1?report=fasta&from=436&to=1467][NCBI]]:

   #+begin_src conf
     >NC_005856.1:436-1467 Enterobacteria phage P1, complete genome
     ATGTCCAATTTACTGACCGTACACCAAAATTTGCCTGCATTACCGGTCGATGCAACGAGTGATGAGGTTC
     GCAAGAACCTGATGGACATGTTCAGGGATCGCCAGGCGTTTTCTGAGCATACCTGGAAAATGCTTCTGTC
     CGTTTGCCGGTCGTGGGCGGCATGGTGCAAGTTGAATAACCGGAAATGGTTTCCCGCAGAACCTGAAGAT
     GTTCGCGATTATCTTCTATATCTTCAGGCGCGCGGTCTGGCAGTAAAAACTATCCAGCAACATTTGGGCC
     AGCTAAACATGCTTCATCGTCGGTCCGGGCTGCCACGACCAAGTGACAGCAATGCTGTTTCACTGGTTAT
     GCGGCGGATCCGAAAAGAAAACGTTGATGCCGGTGAACGTGCAAAACAGGCTCTAGCGTTCGAACGCACT
     GATTTCGACCAGGTTCGTTCACTCATGGAAAATAGCGATCGCTGCCAGGATATACGTAATCTGGCATTTC
     TGGGGATTGCTTATAACACCCTGTTACGTATAGCCGAAATTGCCAGGATCAGGGTTAAAGATATCTCACG
     TACTGACGGTGGGAGAATGTTAATCCATATTGGCAGAACGAAAACGCTGGTTAGCACCGCAGGTGTAGAG
     AAGGCACTTAGCCTGGGGGTAACTAAACTGGTCGAGCGATGGATTTCCGTCTCTGGTGTAGCTGATGATC
     CGAATAACTACCTGTTTTGCCGGGTCAGAAAAAATGGTGTTGCCGCGCCATCTGCCACCAGCCAGCTATC
     AACTCGCGCCCTGGAAGGGATTTTTGAAGCAACTCATCGATTGATTTACGGCGCTAAGGATGACTCTGGT
     CAGAGATACCTGGCCTGGTCTGGACACAGTGCCCGTGTCGGAGCCGCGCGAGATATGGCCCGCGCTGGAG
     TTTCAATACCGGAGATCATGCAAGCTGGTGGCTGGACCAATGTAAATATTGTCATGAACTATATCCGTAA
     CCTGGATAGTGAAACAGGGGCAATGGTGCGCCTGCTGGAAGATGGCGATTAG
   #+end_src

** What to do

   We will map to both sequences and compare. Who knows, maybe it's useful?


* Compute Matrices

** Galaxy Pipeline

  We use =umi-tools extract= for the demultiplexing, =HISAT2= for mapping, =umi-tools deduplicate= for the deduplication, and then the above awk script to perform the quantification.

  #+DOWNLOADED: file:///home/tetris/Downloads/Screenshot_2020-07-26%20Galaxy%20Europe%20Workflow%20Editor.png @ 2020-07-26 12:16:54
  [[file:Making_a_Galaxy_Pipeline/2020-07-26_12-16-54_Screenshot_2020-07-26%20Galaxy%20Europe%20Workflow%20Editor.png]]

** Inputs

   The input FASTQ datasets were the same used to quantify the Dot1L expression in a previous analysis (see the first [[file:1_plots.org][notebook]]), with the Galaxy History /Adrian Salas Datasets/.

   Each input dataset is run it's own history once executed, with the history names being unique by prepending the input dataset number to the Galaxy History.

   The dataset number and the dataset history are related as follows

   #+begin_src python :session yes
     # load env
     import subprocess
     activate_this_file = "/home/tetris/.bioblend/bin/activate_this.py"
     f=open(activate_this_file, 'r')
     exec(f.read(), dict(__file__=activate_this_file))
   #+end_src

   #+begin_src python :session yes :results output
     from bioblend import galaxy
     # Get this from https://usegalaxy.eu/user/api_key
     your_api_key = "5e8f7994e74c7a0e086f91e403c6bd82"
     # Make sure this directory exists
     output_directory = "output"
     gi = galaxy.GalaxyInstance(url="https://usegalaxy.eu", key=your_api_key)
     dclient = galaxy.datasets.DatasetClient(gi)
     hl = gi.histories.get_histories()
     hclient = galaxy.histories.HistoryClient(gi)
     history = [lip for lip in hl if lip['name'] == "Adrian Salas Datasets"][0]
     tab = hclient.show_history(history['id'], contents = True, types = 'dataset_collection')
     hid_name = {x['hid']:x['name'] for x in tab}
     print("ID\tName")
     for hid in sorted(hid_name.keys()):
         print(hid, hid_name[hid], sep="\t")
   #+end_src

   #+RESULTS:
   #+begin_example
   ID	Name
   5	C81721
   8	C81722
   11	C81723
   14	C81724
   17	C81741
   20	C81742
   23	C81743
   26	K81331
   29	K81332
   32	K81333
   35	K81334
   38	K81421
   41	K81422
   44	K81423
   47	K81424
   50	C81744
   53	C81711
   56	C81712
   59	C81713
   62	C81714
   65	K81341
   68	K81342
   71	K81343
   74	K81411
   77	K81412
   80	K81413
   83	K81414
   86	K81441
   89	K81442
   92	K81443
   95	K81444
   98	C81731
   101	C81732
   104	C81733
   107	C81734
   110	K81312
   113	K81313
   116	K81314
   119	K81321
   122	K81322
   125	K81323
   128	K81324
   131	K81431
   134	K81432
   137	K81433
   140	K81434
   #+end_example

   So we have the history ids as well as the matrix names. This will be useful later since we will need to tie Galaxy History names (with prepended history id's) to the dataset name.

** Download Datasets

    #+NAME:downloaddatasets
    #+begin_src python :session yes :var outdir="addgene" :var histprefix="CRE recombinase Count on " :results output verbatim
      import os
      os.mkdir(outdir)
      histories = [(lip['id'],int(lip['name'].split("Count on ")[1]),lip['name']) for lip in hl if lip['name'].startswith(histprefix)]
      for histdata in histories:
          hist_id = histdata[0]
          input_num = histdata[1]
          input_matrix = hid_name[input_num]
          print(input_num, input_matrix)
          res = hclient.show_matching_datasets(hist_id, name_filter="Text.*reformatting.*")
          dataset_id = res[0]['id']
          dclient.download_dataset(dataset_id, file_path="%s/%d_%s.tsv" % (outdir, input_num, input_matrix), use_default_filename=False)
    
    #+end_src

    

*** AddGene

    The AddGene histories all start with "CRE recombinase Count on "

    #+CALL: downloaddatasets(outdir="addgene", histprefix="CRE recombinase Count on ")

    #+RESULTS:
    #+begin_example
    140 K81434
    137 K81433
    134 K81432
    131 K81431
    128 K81324
    125 K81323
    122 K81322
    119 K81321
    116 K81314
    113 K81313
    110 K81312
    107 C81734
    104 C81733
    101 C81732
    98 C81731
    95 K81444
    92 K81443
    89 K81442
    86 K81441
    83 K81414
    80 K81413
    77 K81412
    74 K81411
    71 K81343
    68 K81342
    65 K81341
    62 C81714
    59 C81713
    56 C81712
    53 C81711
    50 C81744
    47 K81424
    44 K81423
    41 K81422
    38 K81421
    35 K81334
    32 K81333
    29 K81332
    26 K81331
    23 C81743
    20 C81742
    17 C81741
    14 C81724
    11 C81723
    8 C81722
    5 C81721
    #+end_example


*** NCBI

    The NCBI histories all start with "CRE Salas Email Count on "

    #+CALL: downloaddatasets(outdir="ncbi", histprefix="CRE Salas Email Count on ")

    #+RESULTS:
    #+begin_example
    140 K81434
    137 K81433
    134 K81432
    131 K81431
    128 K81324
    125 K81323
    122 K81322
    119 K81321
    116 K81314
    113 K81313
    110 K81312
    107 C81734
    104 C81733
    101 C81732
    98 C81731
    95 K81444
    92 K81443
    89 K81442
    86 K81441
    83 K81414
    80 K81413
    77 K81412
    74 K81411
    71 K81343
    68 K81342
    65 K81341
    62 C81714
    59 C81713
    56 C81712
    53 C81711
    50 C81744
    47 K81424
    44 K81423
    41 K81422
    38 K81421
    35 K81334
    32 K81333
    29 K81332
    26 K81331
    23 C81743
    20 C81742
    17 C81741
    14 C81724
    11 C81723
    8 C81722
    5 C81721
    #+end_example


